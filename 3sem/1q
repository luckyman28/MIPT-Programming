#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

typedef struct mystruct
{
    int waittime;
    char** token;
} Line;

void split(char* str, char* delim){
        char* first = strtok(str, delim);
        while (first != NULL){
                printf("%s\n", first);
                first = strtok(NULL, delim);
        }
}

void LineScan(int num, FILE *file, Line *line){
	for(int i = 0; i < num; i++) 
    {
	line[i].token = (char**)calloc(100, sizeof(char*));
	char* str = (char*)malloc(100 * sizeof(char));
	char* delim = " \n";
	fgets(str, 100, file);
	char* first = strtok(str, delim);
	line[i].waittime = atoi(first);
	first = strtok(str, delim);
	int k = 2;
	line[i].token[0] = (char*)calloc(20, sizeof(char));
        line[i].token[1] = (char*)calloc(20, sizeof(char));
        strcpy(line[i].token[0], "timeout");
        strcpy(line[i].token[1], "5");
        while (first != NULL){
		line[i].token[k] = (char*)calloc(20, sizeof(char));
                line[i].token[k] = first;
                first = strtok(NULL, delim);
		k++;
        }
    }
}


//       int check = 0;
  //      line[i].token = (char**)calloc(100, sizeof(char*));
    //    fscanf(file, "%d", &line[i].waittime);
      //  int k = 2;
        //line[i].token[0] = (char*)calloc(20, sizeof(char));
        //line[i].token[1] = (char*)calloc(20, sizeof(char));
        //strcpy(line[i].token[0], "timeout");
        //strcpy(line[i].token[1], "5");
//
  //      for(;;)
    //    {
      //      line[i].token[k] = (char*)calloc(20, sizeof(char));
        //    for(int j = 0;;j++)
          //  {
            //    fscanf(file, "%c", &line[i].token[k][j]);
              //  if (line[i].token[k][j] == ' ' && j == 0)
               // {
                 //   j--;
                  //  continue;
                //}
//
  //              if (line[i].token[k][j] == ' ')
    //            {
      //              line[i].token[k][j] = '\0';
        //            k++;
          //          break;
            //    }
              //  else if (line[i].token[k][j] == '\n')
                //{
                  //  line[i].token[k][j] = '\0';
                    //line[i].token[k + 1] = (char *)0;
                    //check = 1;
                    //break;
                //}
            //}
            //if (check)
              //  break;
        //}
    //}
//}

int main()
{
    int num;
    FILE *file = fopen("input.txt", "r");
    fscanf(file, "%d", &num);
    Line *line = (Line *)calloc(num, sizeof(Line));
    LineScan(num, file, line);
    for(int i = 0; i < num; i++)
    {
        int s;
        pid_t pid = fork();
        if(pid == 0)
        {
            sleep(line[i].waittime);
            execvp(line[i].token[0], line[i].token);
        }
    }
    int killed = 0, status = 0;
    for (;;)
    {
        pid_t pid1 = waitpid(-1, &status, 0);

        if ((status >> 8) & 255)
        {
            printf("Process %d was killed by timeout\n", pid1);
        }
        else
        {
            printf("Process %d ended, status: %d\n", pid1, (status >> 8) & 255);
        }

        killed++;

        if (killed == num)
            break;
    }
    return 0;
}

